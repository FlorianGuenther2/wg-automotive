@startuml
'skinparam wrapWidth 200
participant "Telltale-requester" as TR

box "Cluster Controller"
participant "Request handling"  as Request_handling order 5
participant "QM Plane Rendering" as Rendering_QM order 10
participant "Plane Storage" as Plane_storage order 15
end box
box "Merge Pipeline"
'participant "Configuration Data" as Configuration_data order 35
participant "Plane Blending" as Plane_blending order 35
participant "HW Display Interface" as Display_Interface order 35
end box

participant "Display" as Display order 35
'participant "Backlight" as Backlight order 40

activate TR
TR -> Request_handling : Telltale Request
deactivate TR 

activate Request_handling 
Request_handling -> Rendering_QM : Telltale status to render
deactivate Request_handling 

activate Rendering_QM 
Rendering_QM -> Rendering_QM : Rendering
Rendering_QM -> Plane_storage : Writing Frame

activate Plane_storage

' Polling while frame is written
Plane_blending --> Plane_storage : Polling Data
note right: "Situation bad synchronization"
activate Plane_storage
activate Plane_blending
Plane_storage --> Plane_blending
deactivate Plane_storage
Plane_storage --> Rendering_QM 
deactivate Rendering_QM
deactivate Plane_storage

Plane_blending -> Plane_blending
Plane_blending -> Display_Interface
deactivate Plane_blending
deactivate Plane_storage
Display_Interface-> Display

Plane_blending --> Plane_storage : Polling Data
note right: "Situation good synchronization"
activate Plane_storage
Plane_storage --> Plane_blending
deactivate Plane_storage

activate Plane_blending
Plane_blending -> Plane_blending
Plane_blending -> Display_Interface
deactivate Plane_blending

Display_Interface-> Display




' activate "Display"
' activate "Telltale-requester"
' activate "Request handling"
' activate "Watchdog"
' "Telltale-requester" -> "Request handling" : Telltale request
' activate "Safety-Signal-source"
' "Request handling" -> "Safety-Signal-source": Telltale request
' deactivate "Telltale-requester"

' "Request handling" -> "QT-Application" : Telltale request
' activate "QT-Application"
' "QT-Application" -> "QT-Application" : Render Image

' "QT-Application" -> "Display": Image_out
' deactivate "QT-Application"
' "Display" ->  "Safety-Signal-source" : Image_in
' "Safety-Signal-source" -> "Safety-Signal-source" : Check E2E

' deactivate "Request handling"
' "Safety-Signal-source" -> "Safety-Signal-source": Determine  Safety status
' alt E2E miss or Safety status false
' "Safety-Signal-source" -> "Safety-App": Send cyclic Safety status Message requesting safe state
' else 
' "Safety-Signal-source" -> "Safety-App": Send cyclic Safety status Message
' end
' deactivate "Safety-Signal-source"
' activate "Safety-App"
' "Safety-App" -> "Safety-App": Check E2E
' alt E2E check passes
' "Safety-App" -> "Safety-App": Check Safety Signal
' alt Safety signal OK
' "Safety-App" -> "Watchdog": Pet watchdog
' "Watchdog" -> "Watchdog": watchdog check
' else Safety signal NOK
' "Watchdog" -> "Watchdog": watchdog check
' "Watchdog" -> "Backlight": kill Backlight
' end
' else E2E miss
' "Watchdog" -> "Watchdog": watchdog check
' "Watchdog" -> "Backlight": kill Backlight
' end
@enduml